{"version":3,"sources":["components/TodoItem.tsx","components/NoTodos.tsx","components/TodoList.tsx","components/InputField.tsx","components/TodoSystem.tsx","components/Menu.tsx","components/DisplayControl.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoItem","props","className","type","checked","todo","onChange","onCheck","id","style","border","padding","margin","whiteSpace","title","onClick","deleteTodo","uk-icon","NoTodos","TodoList","todos","length","map","key","InputField","value","onKeyDown","TodoSystem","useState","changeTodos","inputValue","changeInputValue","e","target","trim","filter","Menu","to","DisplayControl","display","children","App","todoList","todoListId","path","render","match","params","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6886847e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ITodo } from \"../Interfaces\";\r\n\r\nexport type deleteTodo = (id: number) => void;\r\n\r\nexport type onCheck = (id: number) => void;\r\n\r\nexport type TodoItemProps = {\r\n    todo: ITodo;\r\n    deleteTodo: deleteTodo;\r\n    onCheck: onCheck;\r\n};\r\n\r\nconst TodoItem: React.FC<TodoItemProps> = props => {\r\n    const styles = {\r\n        pre: {\r\n            border: \"none\",\r\n            padding: \"0\",\r\n            margin: \"0\",\r\n            whiteSpace: \"pre-wrap\" as const\r\n        }\r\n    };\r\n    return (\r\n        <div\r\n            className={`todo\r\n         uk-card \r\n         uk-card-body \r\n         uk-card-default \r\n         uk-margin-top \r\n         uk-margin-right \r\n         uk-margin-bottom \r\n         uk-margin-left \r\n         uk-flex \r\n         uk-flex-between \r\n         uk-flex-middle`}\r\n        >\r\n            <div className=\"uk-flex uk-flex-between\">\r\n                <span>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={props.todo.checked}\r\n                        onChange={() => props.onCheck(props.todo.id)}\r\n                        className=\"uk-checkbox\"\r\n                    ></input>\r\n                </span>\r\n                <pre\r\n                    className=\"todo-title break-word uk-margin-left\"\r\n                    style={styles.pre}\r\n                >\r\n                    {props.todo.title}\r\n                </pre>\r\n            </div>\r\n            <div className=\"uk-margin-left\">\r\n                <button\r\n                    className=\"delete-button uk-icon-button uk-button-primary\"\r\n                    onClick={() => props.deleteTodo(props.todo.id)}\r\n                >\r\n                    <i uk-icon=\"icon: close\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\n\r\nconst NoTodos: React.FC = props => {\r\n    return <div className=\"uk-text-center p20px\">You have no todos</div>;\r\n};\r\n\r\nexport default NoTodos;\r\n","import React from \"react\";\r\nimport { ITodo } from \"../Interfaces\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { deleteTodo, onCheck } from \"./TodoItem\";\r\nimport NoTodos from \"./NoTodos\";\r\n\r\nexport type TodoListProps = {\r\n    todos: ITodo[];\r\n    deleteTodo: deleteTodo;\r\n    onCheck: onCheck;\r\n};\r\n\r\nconst TodoList: React.FC<TodoListProps> = props => {\r\n    return (\r\n        <div className=\"todo-list\">\r\n            {props.todos.length > 0 ? (\r\n                props.todos.map(todo => (\r\n                    <TodoItem\r\n                        todo={todo}\r\n                        key={todo.id}\r\n                        deleteTodo={props.deleteTodo}\r\n                        onCheck={props.onCheck}\r\n                    />\r\n                ))\r\n            ) : (\r\n                <NoTodos />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\n\r\nexport type onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n\r\nexport type onInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => void;\r\n\r\nexport type InputFieldProps = {\r\n    value: string;\r\n    onChange: onInputChange;\r\n    onKeyDown: onInputKeyDown;\r\n};\r\n\r\nconst InputField: React.FC<InputFieldProps> = props => {\r\n    return (\r\n        <div className=\"input-field p20px\">\r\n            <input\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n                onKeyDown={props.onKeyDown}\r\n                className=\"uk-input\"\r\n            ></input>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InputField;\r\n","import React, { useState } from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport { ITodo } from \"../Interfaces\";\r\nimport InputField, { onInputChange, onInputKeyDown } from \"./InputField\";\r\nimport { deleteTodo, onCheck } from \"./TodoItem\";\r\n\r\nlet id = 0;\r\n\r\nconst TodoSystem: React.FC = () => {\r\n    const [todos, changeTodos] = useState<ITodo[]>([]);\r\n\r\n    const [inputValue, changeInputValue] = useState<string>(\"\");\r\n\r\n    const onInputChange: onInputChange = e => {\r\n        changeInputValue(e.target.value);\r\n    };\r\n\r\n    const onInputKeyDown: onInputKeyDown = e => {\r\n        if (e.key === \"Enter\" && inputValue.trim()) {\r\n            changeTodos([\r\n                ...todos,\r\n                { title: inputValue, id: id++, checked: false }\r\n            ]);\r\n            changeInputValue(\"\");\r\n        }\r\n    };\r\n\r\n    const deleteTodo: deleteTodo = id => {\r\n        changeTodos(todos.filter(todo => todo.id !== id));\r\n    };\r\n\r\n    const onCheck: onCheck = id => {\r\n        changeTodos(\r\n            todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    todo.checked = !todo.checked;\r\n                }\r\n                return todo;\r\n            })\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <InputField\r\n                value={inputValue}\r\n                onChange={onInputChange}\r\n                onKeyDown={onInputKeyDown}\r\n            />\r\n            <TodoList todos={todos} deleteTodo={deleteTodo} onCheck={onCheck} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoSystem;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Menu: React.FC = props => {\r\n    return (\r\n        <div className=\"p20px uk-flex uk-flex-around\">\r\n            <Link to=\"/1\" className=\"uk-button-primary uk-button\">\r\n                First list\r\n            </Link>\r\n            <Link to=\"/2\" className=\"uk-button-primary uk-button\">\r\n                Second list\r\n            </Link>\r\n            <Link to=\"/3\" className=\"uk-button-primary uk-button\">\r\n                Third list\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\n\r\nconst DisplayControl: React.FC<{ display: boolean }> = props => {\r\n    return (\r\n        <div\r\n            style={{\r\n                display: props.display ? \"block\" : \"none\"\r\n            }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayControl;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoSystem from \"./components/TodoSystem\";\nimport Menu from \"./components/Menu\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport DisplayControl from \"./components/DisplayControl\";\n\nconst App: React.FC = () => {\n    function todoList(todoListId: string): React.ReactElement {\n        return (\n            <Route\n                path=\"/:todoListId\"\n                render={props => (\n                    <DisplayControl\n                        display={props.match.params.todoListId === todoListId}\n                    >\n                        <TodoSystem />\n                    </DisplayControl>\n                )}\n            />\n        );\n    }\n\n    return (\n        <>\n            <Router>\n                <Menu />\n                {todoList(\"1\")}\n                {todoList(\"2\")}\n                {todoList(\"3\")}\n            </Router>\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}